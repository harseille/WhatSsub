{"version":3,"names":["FILE_TYPE","Object","freeze","NON_COMPILABLE","COMPILED","IGNORED","ERR_COMPILATION","outputFileSync","filePath","data","path","dirname","recursive","fs","writeFileSync","cliOptions","babelOptions","write","src","base","relative","util","isCompilableExtension","extensions","withExtension","keepFileExtension","extname","outFileExtension","dest","getDest","res","compile","sourceFileName","slash","map","outputMap","sourceMaps","undefined","hasDataSourcemap","code","mapLoc","addSourceMappingUrl","file","basename","JSON","stringify","chmod","verbose","console","log","process","cwd","err","watch","error","filename","join","outDir","handleFile","written","copyFiles","copyIgnored","readFileSync","handle","filenameOrDir","existsSync","stat","statSync","isDirectory","count","files","readdir","includeDotfiles","compiledFiles","startTime","logSuccess","debounce","diff","hrtime","Math","round","watcher","enable","enableGlobbing","skipInitialBuild","deleteDirOnStart","deleteDir","filenames","quiet","flush","processing","getBase","length","absoluteBase","resolve","filenameToBaseMap","Map","absoluteFilename","absoluteFilenames","sep","get","absoluteFilenameOrDir","startsWith","set","forEach","startWatcher","onFilesChange","Promise","all","filter","Boolean"],"sources":["../../src/babel/dir.ts"],"sourcesContent":["import slash from \"slash\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nimport * as util from \"./util\";\nimport * as watcher from \"./watcher\";\nimport type { CmdOptions } from \"./options\";\n\nconst FILE_TYPE = Object.freeze({\n  NON_COMPILABLE: \"NON_COMPILABLE\",\n  COMPILED: \"COMPILED\",\n  IGNORED: \"IGNORED\",\n  ERR_COMPILATION: \"ERR_COMPILATION\",\n} as const);\n\nfunction outputFileSync(filePath: string, data: string | Buffer): void {\n  fs.mkdirSync(path.dirname(filePath), { recursive: true });\n  fs.writeFileSync(filePath, data);\n}\n\nexport default async function ({\n  cliOptions,\n  babelOptions,\n}: CmdOptions): Promise<void> {\n  async function write(\n    src: string,\n    base: string,\n  ): Promise<keyof typeof FILE_TYPE> {\n    let relative = path.relative(base, src);\n\n    if (!util.isCompilableExtension(relative, cliOptions.extensions)) {\n      return FILE_TYPE.NON_COMPILABLE;\n    }\n\n    relative = util.withExtension(\n      relative,\n      cliOptions.keepFileExtension\n        ? path.extname(relative)\n        : cliOptions.outFileExtension,\n    );\n\n    const dest = getDest(relative, base);\n\n    try {\n      const res = await util.compile(src, {\n        ...babelOptions,\n        sourceFileName: slash(path.relative(dest + \"/..\", src)),\n      });\n\n      if (!res) return FILE_TYPE.IGNORED;\n\n      if (res.map) {\n        let outputMap: \"both\" | \"external\" | false = false;\n        if (babelOptions.sourceMaps && babelOptions.sourceMaps !== \"inline\") {\n          outputMap = \"external\";\n        } else if (babelOptions.sourceMaps == undefined) {\n          outputMap = util.hasDataSourcemap(res.code) ? \"external\" : \"both\";\n        }\n\n        if (outputMap) {\n          const mapLoc = dest + \".map\";\n          if (outputMap === \"external\") {\n            res.code = util.addSourceMappingUrl(res.code, mapLoc);\n          }\n          res.map.file = path.basename(relative);\n          outputFileSync(mapLoc, JSON.stringify(res.map));\n        }\n      }\n\n      outputFileSync(dest, res.code);\n      util.chmod(src, dest);\n\n      if (cliOptions.verbose) {\n        console.log(path.relative(process.cwd(), src) + \" -> \" + dest);\n      }\n\n      return FILE_TYPE.COMPILED;\n    } catch (err) {\n      if (cliOptions.watch) {\n        console.error(err);\n        return FILE_TYPE.ERR_COMPILATION;\n      }\n\n      throw err;\n    }\n  }\n\n  function getDest(filename: string, base: string): string {\n    if (cliOptions.relative) {\n      return path.join(base, cliOptions.outDir, filename);\n    }\n    return path.join(cliOptions.outDir, filename);\n  }\n\n  async function handleFile(src: string, base: string): Promise<boolean> {\n    const written = await write(src, base);\n\n    if (\n      (cliOptions.copyFiles && written === FILE_TYPE.NON_COMPILABLE) ||\n      (cliOptions.copyIgnored && written === FILE_TYPE.IGNORED)\n    ) {\n      const filename = path.relative(base, src);\n      const dest = getDest(filename, base);\n      outputFileSync(dest, fs.readFileSync(src));\n      util.chmod(src, dest);\n    }\n    return written === FILE_TYPE.COMPILED;\n  }\n\n  async function handle(filenameOrDir: string): Promise<number> {\n    if (!fs.existsSync(filenameOrDir)) return 0;\n\n    const stat = fs.statSync(filenameOrDir);\n\n    if (stat.isDirectory()) {\n      const dirname = filenameOrDir;\n\n      let count = 0;\n\n      const files = util.readdir(dirname, cliOptions.includeDotfiles);\n      for (const filename of files) {\n        const src = path.join(dirname, filename);\n\n        const written = await handleFile(src, dirname);\n        if (written) count += 1;\n      }\n\n      return count;\n    } else {\n      const filename = filenameOrDir;\n      const written = await handleFile(filename, path.dirname(filename));\n\n      return written ? 1 : 0;\n    }\n  }\n\n  let compiledFiles = 0;\n  let startTime: [number, number] | null = null;\n\n  const logSuccess = util.debounce(function () {\n    if (startTime === null) {\n      // This should never happen, but just in case it's better\n      // to ignore the log message rather than making @babel/cli crash.\n      return;\n    }\n\n    const diff = process.hrtime(startTime);\n\n    console.log(\n      `Successfully compiled ${compiledFiles} ${\n        compiledFiles !== 1 ? \"files\" : \"file\"\n      } with Babel (${diff[0] * 1e3 + Math.round(diff[1] / 1e6)}ms).`,\n    );\n    compiledFiles = 0;\n    startTime = null;\n  }, 100);\n\n  if (cliOptions.watch) watcher.enable({ enableGlobbing: true });\n\n  if (!cliOptions.skipInitialBuild) {\n    if (cliOptions.deleteDirOnStart) {\n      util.deleteDir(cliOptions.outDir);\n    }\n\n    fs.mkdirSync(cliOptions.outDir, { recursive: true });\n\n    startTime = process.hrtime();\n\n    for (const filename of cliOptions.filenames) {\n      // compiledFiles is just incremented without reading its value, so we\n      // don't risk race conditions.\n      // eslint-disable-next-line require-atomic-updates\n      compiledFiles += await handle(filename);\n    }\n\n    if (!cliOptions.quiet) {\n      logSuccess();\n      logSuccess.flush();\n    }\n  }\n\n  if (cliOptions.watch) {\n    // This, alongside with debounce, allows us to only log\n    // when we are sure that all the files have been compiled.\n    let processing = 0;\n    const { filenames } = cliOptions;\n    let getBase: (filename: string) => string | null;\n    if (filenames.length === 1) {\n      // fast path: If there is only one filenames, we know it must be the base\n      const base = filenames[0];\n      const absoluteBase = path.resolve(base);\n      getBase = filename => {\n        return filename === absoluteBase ? path.dirname(base) : base;\n      };\n    } else {\n      // A map from absolute compiled file path to its base, from which\n      // the output destination will be determined\n      const filenameToBaseMap: Map<string, string> = new Map(\n        filenames.map(filename => {\n          const absoluteFilename = path.resolve(filename);\n          return [absoluteFilename, path.dirname(filename)];\n        }),\n      );\n\n      const absoluteFilenames: Map<string, string> = new Map(\n        filenames.map(filename => {\n          const absoluteFilename = path.resolve(filename);\n          return [absoluteFilename, filename];\n        }),\n      );\n\n      const { sep } = path;\n      // determine base from the absolute file path\n      getBase = filename => {\n        const base = filenameToBaseMap.get(filename);\n        if (base !== undefined) {\n          return base;\n        }\n        for (const [absoluteFilenameOrDir, relative] of absoluteFilenames) {\n          if (filename.startsWith(absoluteFilenameOrDir + sep)) {\n            filenameToBaseMap.set(filename, relative);\n            return relative;\n          }\n        }\n        // Can't determine the base, probably external deps\n        return \"\";\n      };\n    }\n\n    filenames.forEach(filenameOrDir => {\n      watcher.watch(filenameOrDir);\n    });\n\n    watcher.startWatcher();\n\n    watcher.onFilesChange(async filenames => {\n      processing++;\n      if (startTime === null) startTime = process.hrtime();\n\n      try {\n        const written = await Promise.all(\n          filenames.map(filename => handleFile(filename, getBase(filename))),\n        );\n\n        compiledFiles += written.filter(Boolean).length;\n      } catch (err) {\n        console.error(err);\n      }\n\n      processing--;\n      if (processing === 0 && !cliOptions.quiet) logSuccess();\n    });\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;;AACA;;;;;;AAGA,MAAMA,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc;EAC9BC,cAAc,EAAE,gBADc;EAE9BC,QAAQ,EAAE,UAFoB;EAG9BC,OAAO,EAAE,SAHqB;EAI9BC,eAAe,EAAE;AAJa,CAAd,CAAlB;;AAOA,SAASC,cAAT,CAAwBC,QAAxB,EAA0CC,IAA1C,EAAuE;EACrE,iLAAaC,OAAA,CAAKC,OAAL,CAAaH,QAAb,CAAb,EAAqC;IAAEI,SAAS,EAAE;EAAb,CAArC;;EACAC,KAAA,CAAGC,aAAH,CAAiBN,QAAjB,EAA2BC,IAA3B;AACD;;;;;;;2BAEc,WAAgB;IAC7BM,UAD6B;IAE7BC;EAF6B,CAAhB,EAGe;IAAA,SACbC,KADa;MAAA;IAAA;;IAAA;MAAA,2BAC5B,WACEC,GADF,EAEEC,IAFF,EAGmC;QACjC,IAAIC,QAAQ,GAAGV,OAAA,CAAKU,QAAL,CAAcD,IAAd,EAAoBD,GAApB,CAAf;;QAEA,IAAI,CAACG,IAAI,CAACC,qBAAL,CAA2BF,QAA3B,EAAqCL,UAAU,CAACQ,UAAhD,CAAL,EAAkE;UAChE,OAAOvB,SAAS,CAACG,cAAjB;QACD;;QAEDiB,QAAQ,GAAGC,IAAI,CAACG,aAAL,CACTJ,QADS,EAETL,UAAU,CAACU,iBAAX,GACIf,OAAA,CAAKgB,OAAL,CAAaN,QAAb,CADJ,GAEIL,UAAU,CAACY,gBAJN,CAAX;QAOA,MAAMC,IAAI,GAAGC,OAAO,CAACT,QAAD,EAAWD,IAAX,CAApB;;QAEA,IAAI;UACF,MAAMW,GAAG,SAAST,IAAI,CAACU,OAAL,CAAab,GAAb,oBACbF,YADa;YAEhBgB,cAAc,EAAEC,QAAA,CAAMvB,OAAA,CAAKU,QAAL,CAAcQ,IAAI,GAAG,KAArB,EAA4BV,GAA5B,CAAN;UAFA,GAAlB;UAKA,IAAI,CAACY,GAAL,EAAU,OAAO9B,SAAS,CAACK,OAAjB;;UAEV,IAAIyB,GAAG,CAACI,GAAR,EAAa;YACX,IAAIC,SAAsC,GAAG,KAA7C;;YACA,IAAInB,YAAY,CAACoB,UAAb,IAA2BpB,YAAY,CAACoB,UAAb,KAA4B,QAA3D,EAAqE;cACnED,SAAS,GAAG,UAAZ;YACD,CAFD,MAEO,IAAInB,YAAY,CAACoB,UAAb,IAA2BC,SAA/B,EAA0C;cAC/CF,SAAS,GAAGd,IAAI,CAACiB,gBAAL,CAAsBR,GAAG,CAACS,IAA1B,IAAkC,UAAlC,GAA+C,MAA3D;YACD;;YAED,IAAIJ,SAAJ,EAAe;cACb,MAAMK,MAAM,GAAGZ,IAAI,GAAG,MAAtB;;cACA,IAAIO,SAAS,KAAK,UAAlB,EAA8B;gBAC5BL,GAAG,CAACS,IAAJ,GAAWlB,IAAI,CAACoB,mBAAL,CAAyBX,GAAG,CAACS,IAA7B,EAAmCC,MAAnC,CAAX;cACD;;cACDV,GAAG,CAACI,GAAJ,CAAQQ,IAAR,GAAehC,OAAA,CAAKiC,QAAL,CAAcvB,QAAd,CAAf;cACAb,cAAc,CAACiC,MAAD,EAASI,IAAI,CAACC,SAAL,CAAef,GAAG,CAACI,GAAnB,CAAT,CAAd;YACD;UACF;;UAED3B,cAAc,CAACqB,IAAD,EAAOE,GAAG,CAACS,IAAX,CAAd;UACAlB,IAAI,CAACyB,KAAL,CAAW5B,GAAX,EAAgBU,IAAhB;;UAEA,IAAIb,UAAU,CAACgC,OAAf,EAAwB;YACtBC,OAAO,CAACC,GAAR,CAAYvC,OAAA,CAAKU,QAAL,CAAc8B,OAAO,CAACC,GAAR,EAAd,EAA6BjC,GAA7B,IAAoC,MAApC,GAA6CU,IAAzD;UACD;;UAED,OAAO5B,SAAS,CAACI,QAAjB;QACD,CAlCD,CAkCE,OAAOgD,GAAP,EAAY;UACZ,IAAIrC,UAAU,CAACsC,KAAf,EAAsB;YACpBL,OAAO,CAACM,KAAR,CAAcF,GAAd;YACA,OAAOpD,SAAS,CAACM,eAAjB;UACD;;UAED,MAAM8C,GAAN;QACD;MACF,CA9D2B;MAAA;IAAA;;IAgE5B,SAASvB,OAAT,CAAiB0B,QAAjB,EAAmCpC,IAAnC,EAAyD;MACvD,IAAIJ,UAAU,CAACK,QAAf,EAAyB;QACvB,OAAOV,OAAA,CAAK8C,IAAL,CAAUrC,IAAV,EAAgBJ,UAAU,CAAC0C,MAA3B,EAAmCF,QAAnC,CAAP;MACD;;MACD,OAAO7C,OAAA,CAAK8C,IAAL,CAAUzC,UAAU,CAAC0C,MAArB,EAA6BF,QAA7B,CAAP;IACD;;IArE2B,SAuEbG,UAvEa;MAAA;IAAA;;IAAA;MAAA,gCAuE5B,WAA0BxC,GAA1B,EAAuCC,IAAvC,EAAuE;QACrE,MAAMwC,OAAO,SAAS1C,KAAK,CAACC,GAAD,EAAMC,IAAN,CAA3B;;QAEA,IACGJ,UAAU,CAAC6C,SAAX,IAAwBD,OAAO,KAAK3D,SAAS,CAACG,cAA/C,IACCY,UAAU,CAAC8C,WAAX,IAA0BF,OAAO,KAAK3D,SAAS,CAACK,OAFnD,EAGE;UACA,MAAMkD,QAAQ,GAAG7C,OAAA,CAAKU,QAAL,CAAcD,IAAd,EAAoBD,GAApB,CAAjB;;UACA,MAAMU,IAAI,GAAGC,OAAO,CAAC0B,QAAD,EAAWpC,IAAX,CAApB;UACAZ,cAAc,CAACqB,IAAD,EAAOf,KAAA,CAAGiD,YAAH,CAAgB5C,GAAhB,CAAP,CAAd;UACAG,IAAI,CAACyB,KAAL,CAAW5B,GAAX,EAAgBU,IAAhB;QACD;;QACD,OAAO+B,OAAO,KAAK3D,SAAS,CAACI,QAA7B;MACD,CApF2B;MAAA;IAAA;;IAAA,SAsFb2D,MAtFa;MAAA;IAAA;;IAAA;MAAA,4BAsF5B,WAAsBC,aAAtB,EAA8D;QAC5D,IAAI,CAACnD,KAAA,CAAGoD,UAAH,CAAcD,aAAd,CAAL,EAAmC,OAAO,CAAP;;QAEnC,MAAME,IAAI,GAAGrD,KAAA,CAAGsD,QAAH,CAAYH,aAAZ,CAAb;;QAEA,IAAIE,IAAI,CAACE,WAAL,EAAJ,EAAwB;UACtB,MAAMzD,OAAO,GAAGqD,aAAhB;UAEA,IAAIK,KAAK,GAAG,CAAZ;UAEA,MAAMC,KAAK,GAAGjD,IAAI,CAACkD,OAAL,CAAa5D,OAAb,EAAsBI,UAAU,CAACyD,eAAjC,CAAd;;UACA,KAAK,MAAMjB,QAAX,IAAuBe,KAAvB,EAA8B;YAC5B,MAAMpD,GAAG,GAAGR,OAAA,CAAK8C,IAAL,CAAU7C,OAAV,EAAmB4C,QAAnB,CAAZ;;YAEA,MAAMI,OAAO,SAASD,UAAU,CAACxC,GAAD,EAAMP,OAAN,CAAhC;YACA,IAAIgD,OAAJ,EAAaU,KAAK,IAAI,CAAT;UACd;;UAED,OAAOA,KAAP;QACD,CAdD,MAcO;UACL,MAAMd,QAAQ,GAAGS,aAAjB;UACA,MAAML,OAAO,SAASD,UAAU,CAACH,QAAD,EAAW7C,OAAA,CAAKC,OAAL,CAAa4C,QAAb,CAAX,CAAhC;UAEA,OAAOI,OAAO,GAAG,CAAH,GAAO,CAArB;QACD;MACF,CA/G2B;MAAA;IAAA;;IAiH5B,IAAIc,aAAa,GAAG,CAApB;IACA,IAAIC,SAAkC,GAAG,IAAzC;IAEA,MAAMC,UAAU,GAAGtD,IAAI,CAACuD,QAAL,CAAc,YAAY;MAC3C,IAAIF,SAAS,KAAK,IAAlB,EAAwB;QAGtB;MACD;;MAED,MAAMG,IAAI,GAAG3B,OAAO,CAAC4B,MAAR,CAAeJ,SAAf,CAAb;MAEA1B,OAAO,CAACC,GAAR,CACG,yBAAwBwB,aAAc,IACrCA,aAAa,KAAK,CAAlB,GAAsB,OAAtB,GAAgC,MACjC,gBAAeI,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAV,GAAgBE,IAAI,CAACC,KAAL,CAAWH,IAAI,CAAC,CAAD,CAAJ,GAAU,GAArB,CAA0B,MAH5D;MAKAJ,aAAa,GAAG,CAAhB;MACAC,SAAS,GAAG,IAAZ;IACD,CAhBkB,EAgBhB,GAhBgB,CAAnB;IAkBA,IAAI3D,UAAU,CAACsC,KAAf,EAAsB4B,OAAO,CAACC,MAAR,CAAe;MAAEC,cAAc,EAAE;IAAlB,CAAf;;IAEtB,IAAI,CAACpE,UAAU,CAACqE,gBAAhB,EAAkC;MAChC,IAAIrE,UAAU,CAACsE,gBAAf,EAAiC;QAC/BhE,IAAI,CAACiE,SAAL,CAAevE,UAAU,CAAC0C,MAA1B;MACD;;MAED,iLAAa1C,UAAU,CAAC0C,MAAxB,EAAgC;QAAE7C,SAAS,EAAE;MAAb,CAAhC;MAEA8D,SAAS,GAAGxB,OAAO,CAAC4B,MAAR,EAAZ;;MAEA,KAAK,MAAMvB,QAAX,IAAuBxC,UAAU,CAACwE,SAAlC,EAA6C;QAI3Cd,aAAa,UAAUV,MAAM,CAACR,QAAD,CAA7B;MACD;;MAED,IAAI,CAACxC,UAAU,CAACyE,KAAhB,EAAuB;QACrBb,UAAU;QACVA,UAAU,CAACc,KAAX;MACD;IACF;;IAED,IAAI1E,UAAU,CAACsC,KAAf,EAAsB;MAGpB,IAAIqC,UAAU,GAAG,CAAjB;MACA,MAAM;QAAEH;MAAF,IAAgBxE,UAAtB;MACA,IAAI4E,OAAJ;;MACA,IAAIJ,SAAS,CAACK,MAAV,KAAqB,CAAzB,EAA4B;QAE1B,MAAMzE,IAAI,GAAGoE,SAAS,CAAC,CAAD,CAAtB;;QACA,MAAMM,YAAY,GAAGnF,OAAA,CAAKoF,OAAL,CAAa3E,IAAb,CAArB;;QACAwE,OAAO,GAAGpC,QAAQ,IAAI;UACpB,OAAOA,QAAQ,KAAKsC,YAAb,GAA4BnF,OAAA,CAAKC,OAAL,CAAaQ,IAAb,CAA5B,GAAiDA,IAAxD;QACD,CAFD;MAGD,CAPD,MAOO;QAGL,MAAM4E,iBAAsC,GAAG,IAAIC,GAAJ,CAC7CT,SAAS,CAACrD,GAAV,CAAcqB,QAAQ,IAAI;UACxB,MAAM0C,gBAAgB,GAAGvF,OAAA,CAAKoF,OAAL,CAAavC,QAAb,CAAzB;;UACA,OAAO,CAAC0C,gBAAD,EAAmBvF,OAAA,CAAKC,OAAL,CAAa4C,QAAb,CAAnB,CAAP;QACD,CAHD,CAD6C,CAA/C;QAOA,MAAM2C,iBAAsC,GAAG,IAAIF,GAAJ,CAC7CT,SAAS,CAACrD,GAAV,CAAcqB,QAAQ,IAAI;UACxB,MAAM0C,gBAAgB,GAAGvF,OAAA,CAAKoF,OAAL,CAAavC,QAAb,CAAzB;;UACA,OAAO,CAAC0C,gBAAD,EAAmB1C,QAAnB,CAAP;QACD,CAHD,CAD6C,CAA/C;;QAOA,MAAM;UAAE4C;QAAF,IAAUzF,OAAhB;;QAEAiF,OAAO,GAAGpC,QAAQ,IAAI;UACpB,MAAMpC,IAAI,GAAG4E,iBAAiB,CAACK,GAAlB,CAAsB7C,QAAtB,CAAb;;UACA,IAAIpC,IAAI,KAAKkB,SAAb,EAAwB;YACtB,OAAOlB,IAAP;UACD;;UACD,KAAK,MAAM,CAACkF,qBAAD,EAAwBjF,QAAxB,CAAX,IAAgD8E,iBAAhD,EAAmE;YACjE,IAAI3C,QAAQ,CAAC+C,UAAT,CAAoBD,qBAAqB,GAAGF,GAA5C,CAAJ,EAAsD;cACpDJ,iBAAiB,CAACQ,GAAlB,CAAsBhD,QAAtB,EAAgCnC,QAAhC;cACA,OAAOA,QAAP;YACD;UACF;;UAED,OAAO,EAAP;QACD,CAbD;MAcD;;MAEDmE,SAAS,CAACiB,OAAV,CAAkBxC,aAAa,IAAI;QACjCiB,OAAO,CAAC5B,KAAR,CAAcW,aAAd;MACD,CAFD;MAIAiB,OAAO,CAACwB,YAAR;MAEAxB,OAAO,CAACyB,aAAR,mBAAsB,WAAMnB,SAAN,EAAmB;QACvCG,UAAU;QACV,IAAIhB,SAAS,KAAK,IAAlB,EAAwBA,SAAS,GAAGxB,OAAO,CAAC4B,MAAR,EAAZ;;QAExB,IAAI;UACF,MAAMnB,OAAO,SAASgD,OAAO,CAACC,GAAR,CACpBrB,SAAS,CAACrD,GAAV,CAAcqB,QAAQ,IAAIG,UAAU,CAACH,QAAD,EAAWoC,OAAO,CAACpC,QAAD,CAAlB,CAApC,CADoB,CAAtB;UAIAkB,aAAa,IAAId,OAAO,CAACkD,MAAR,CAAeC,OAAf,EAAwBlB,MAAzC;QACD,CAND,CAME,OAAOxC,GAAP,EAAY;UACZJ,OAAO,CAACM,KAAR,CAAcF,GAAd;QACD;;QAEDsC,UAAU;QACV,IAAIA,UAAU,KAAK,CAAf,IAAoB,CAAC3E,UAAU,CAACyE,KAApC,EAA2Cb,UAAU;MACtD,CAhBD;IAiBD;EACF,C"}