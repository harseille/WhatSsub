{"version":3,"file":"router.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createPath(location);\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(typeof to === \"string\" ? to : createPath(to));\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n  external: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type SubmissionFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | SubmissionFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: SubmissionFormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createURL,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  SubmissionFormMethod,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validActionMethodsArr: SubmissionFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validActionMethods = new Set<SubmissionFormMethod>(validActionMethodsArr);\n\nconst validRequestMethodsArr: FormMethod[] = [\"get\", ...validActionMethodsArr];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = {\n      ...location,\n      ...init.history.encodeLocation(location),\n    };\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(\n        state,\n        result,\n        opts && opts.replace === true\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult);\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location);\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    if (\n      redirect.external &&\n      typeof window !== \"undefined\" &&\n      typeof window.location !== \"undefined\"\n    ) {\n      if (replace) {\n        window.location.replace(redirect.location);\n      } else {\n        window.location.assign(redirect.location);\n      }\n      return;\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      formMethod &&\n      isSubmissionMethod(formMethod) &&\n      formEncType &&\n      formData\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          formMethod,\n          formAction: redirect.location,\n          formEncType,\n          formData,\n        },\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: formMethod || undefined,\n          formAction: formAction || undefined,\n          formEncType: formEncType || undefined,\n          formData: formData || undefined,\n        },\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request: Request, routeId?: string): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(request, location, matches, match);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isSubmissionMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, routeMatch);\n      return result instanceof Response\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: createURL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, undefined, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: createURL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod && isSubmissionMethod(opts.formMethod)) {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Check if this an external redirect that goes to a new origin\n      let external = createURL(location).origin !== createURL(\"/\").origin;\n\n      // Support relative routing in internal redirects\n      if (!external) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let requestPath = createURL(request.url).pathname;\n        let resolvedLocation = resolveTo(location, routePathnames, requestPath);\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        external,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    obj.response instanceof Response &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isSubmissionMethod(method: string): method is SubmissionFormMethod {\n  return validActionMethods.has(method as SubmissionFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","parsedPath","searchIndex","createURL","origin","URL","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","invariant","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeys","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validActionMethodsArr","validActionMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","handleLoaders","result","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","fetcher","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectLocation","external","redirectHistoryAction","isSubmissionMethod","currentMatches","fetchersToLoad","all","fetchMatches","resolveDeferredResults","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","unstable_createStaticHandler","query","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","queryRoute","find","values","routeData","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","resultType","onReject","handler","activeMatches","requestPath","resolvedLocation","contentType","text","deferred","toUpperCase","body","Request","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"mappings":"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"}